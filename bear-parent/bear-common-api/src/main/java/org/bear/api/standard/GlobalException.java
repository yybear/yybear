/**
 * Autogenerated by Avro
 * 
 * DO NOT EDIT DIRECTLY
 */
package org.bear.api.standard;  
@SuppressWarnings("all")
/** * 通用错误对象
	 *
	 * @field code 错误代码
	 *
	 * @field msg 错误消息
	 *
	 * @field stackTraces 错误堆栈，供调试用 */
@org.apache.avro.specific.AvroGenerated
public class GlobalException extends org.apache.avro.specific.SpecificExceptionBase implements org.apache.avro.specific.SpecificRecord {
  public static final org.apache.avro.Schema SCHEMA$ = new org.apache.avro.Schema.Parser().parse("{\"type\":\"error\",\"name\":\"GlobalException\",\"namespace\":\"org.bear.api.standard\",\"doc\":\"* 通用错误对象\\r\\n\\t *\\r\\n\\t * @field code 错误代码\\r\\n\\t *\\r\\n\\t * @field msg 错误消息\\r\\n\\t *\\r\\n\\t * @field stackTraces 错误堆栈，供调试用\",\"fields\":[{\"name\":\"code\",\"type\":\"int\"},{\"name\":\"msg\",\"type\":{\"type\":\"string\",\"avro.java.string\":\"String\"}},{\"name\":\"stackTraces\",\"type\":{\"type\":\"array\",\"items\":{\"type\":\"record\",\"name\":\"StackTrace\",\"doc\":\"* 异常堆栈对象\\r\\n\\t *\\r\\n\\t * @field className 发生异常的类\\r\\n\\t *\\r\\n\\t * @field methodName 发生异常的方法\\r\\n\\t *\\r\\n\\t * @field fileName 发生异常的文件\\r\\n\\t *\\r\\n\\t * @field lineNumber 发生异常的行号\",\"fields\":[{\"name\":\"className\",\"type\":{\"type\":\"string\",\"avro.java.string\":\"String\"}},{\"name\":\"methodName\",\"type\":{\"type\":\"string\",\"avro.java.string\":\"String\"}},{\"name\":\"fileName\",\"type\":{\"type\":\"string\",\"avro.java.string\":\"String\"}},{\"name\":\"lineNumber\",\"type\":\"int\"}]},\"java_class\":\"java.util.ArrayList\"}}]}");
  @Deprecated public int code;
  @Deprecated public java.lang.String msg;
  @Deprecated public java.util.List<org.bear.api.standard.StackTrace> stackTraces;

  public GlobalException() {
    super();
  }
  
  public GlobalException(Object value) {
    super(value);
  }

  public GlobalException(Throwable cause) {
    super(cause);
  }

  public GlobalException(Object value, Throwable cause) {
    super(value, cause);
  }
  
  public org.apache.avro.Schema getSchema() { return SCHEMA$; }
  // Used by DatumWriter.  Applications should not call. 
  public java.lang.Object get(int field$) {
    switch (field$) {
    case 0: return code;
    case 1: return msg;
    case 2: return stackTraces;
    default: throw new org.apache.avro.AvroRuntimeException("Bad index");
    }
  }
  // Used by DatumReader.  Applications should not call. 
  @SuppressWarnings(value="unchecked")
  public void put(int field$, java.lang.Object value$) {
    switch (field$) {
    case 0: code = (java.lang.Integer)value$; break;
    case 1: msg = (java.lang.String)value$; break;
    case 2: stackTraces = (java.util.List<org.bear.api.standard.StackTrace>)value$; break;
    default: throw new org.apache.avro.AvroRuntimeException("Bad index");
    }
  }

  /**
   * Gets the value of the 'code' field.
   */
  public java.lang.Integer getCode() {
    return code;
  }

  /**
   * Sets the value of the 'code' field.
   * @param value the value to set.
   */
  public void setCode(java.lang.Integer value) {
    this.code = value;
  }

  /**
   * Gets the value of the 'msg' field.
   */
  public java.lang.String getMsg() {
    return msg;
  }

  /**
   * Sets the value of the 'msg' field.
   * @param value the value to set.
   */
  public void setMsg(java.lang.String value) {
    this.msg = value;
  }

  /**
   * Gets the value of the 'stackTraces' field.
   */
  public java.util.List<org.bear.api.standard.StackTrace> getStackTraces() {
    return stackTraces;
  }

  /**
   * Sets the value of the 'stackTraces' field.
   * @param value the value to set.
   */
  public void setStackTraces(java.util.List<org.bear.api.standard.StackTrace> value) {
    this.stackTraces = value;
  }

  /** Creates a new GlobalException RecordBuilder */
  public static org.bear.api.standard.GlobalException.Builder newBuilder() {
    return new org.bear.api.standard.GlobalException.Builder();
  }
  
  /** Creates a new GlobalException RecordBuilder by copying an existing Builder */
  public static org.bear.api.standard.GlobalException.Builder newBuilder(org.bear.api.standard.GlobalException.Builder other) {
    return new org.bear.api.standard.GlobalException.Builder(other);
  }
  
  /** Creates a new GlobalException RecordBuilder by copying an existing GlobalException instance */
  public static org.bear.api.standard.GlobalException.Builder newBuilder(org.bear.api.standard.GlobalException other) {
    return new org.bear.api.standard.GlobalException.Builder(other);
  }
  
  /**
   * RecordBuilder for GlobalException instances.
   */
  public static class Builder extends org.apache.avro.specific.SpecificErrorBuilderBase<GlobalException>
    implements org.apache.avro.data.ErrorBuilder<GlobalException> {

    private int code;
    private java.lang.String msg;
    private java.util.List<org.bear.api.standard.StackTrace> stackTraces;

    /** Creates a new Builder */
    private Builder() {
      super(org.bear.api.standard.GlobalException.SCHEMA$);
    }
    
    /** Creates a Builder by copying an existing Builder */
    private Builder(org.bear.api.standard.GlobalException.Builder other) {
      super(other);
    }
    
    /** Creates a Builder by copying an existing GlobalException instance */
    private Builder(org.bear.api.standard.GlobalException other) {
      super(other);
      if (isValidValue(fields()[0], other.code)) {
        this.code = data().deepCopy(fields()[0].schema(), other.code);
        fieldSetFlags()[0] = true;
      }
      if (isValidValue(fields()[1], other.msg)) {
        this.msg = data().deepCopy(fields()[1].schema(), other.msg);
        fieldSetFlags()[1] = true;
      }
      if (isValidValue(fields()[2], other.stackTraces)) {
        this.stackTraces = data().deepCopy(fields()[2].schema(), other.stackTraces);
        fieldSetFlags()[2] = true;
      }
    }

    @Override
    public org.bear.api.standard.GlobalException.Builder setValue(Object value) {
      super.setValue(value);
      return this;
    }
    
    @Override
    public org.bear.api.standard.GlobalException.Builder clearValue() {
      super.clearValue();
      return this;
    }

    @Override
    public org.bear.api.standard.GlobalException.Builder setCause(Throwable cause) {
      super.setCause(cause);
      return this;
    }
    
    @Override
    public org.bear.api.standard.GlobalException.Builder clearCause() {
      super.clearCause();
      return this;
    }

    /** Gets the value of the 'code' field */
    public java.lang.Integer getCode() {
      return code;
    }
    
    /** Sets the value of the 'code' field */
    public org.bear.api.standard.GlobalException.Builder setCode(int value) {
      validate(fields()[0], value);
      this.code = value;
      fieldSetFlags()[0] = true;
      return this; 
    }
    
    /** Checks whether the 'code' field has been set */
    public boolean hasCode() {
      return fieldSetFlags()[0];
    }
    
    /** Clears the value of the 'code' field */
    public org.bear.api.standard.GlobalException.Builder clearCode() {
      fieldSetFlags()[0] = false;
      return this;
    }

    /** Gets the value of the 'msg' field */
    public java.lang.String getMsg() {
      return msg;
    }
    
    /** Sets the value of the 'msg' field */
    public org.bear.api.standard.GlobalException.Builder setMsg(java.lang.String value) {
      validate(fields()[1], value);
      this.msg = value;
      fieldSetFlags()[1] = true;
      return this; 
    }
    
    /** Checks whether the 'msg' field has been set */
    public boolean hasMsg() {
      return fieldSetFlags()[1];
    }
    
    /** Clears the value of the 'msg' field */
    public org.bear.api.standard.GlobalException.Builder clearMsg() {
      msg = null;
      fieldSetFlags()[1] = false;
      return this;
    }

    /** Gets the value of the 'stackTraces' field */
    public java.util.List<org.bear.api.standard.StackTrace> getStackTraces() {
      return stackTraces;
    }
    
    /** Sets the value of the 'stackTraces' field */
    public org.bear.api.standard.GlobalException.Builder setStackTraces(java.util.List<org.bear.api.standard.StackTrace> value) {
      validate(fields()[2], value);
      this.stackTraces = value;
      fieldSetFlags()[2] = true;
      return this; 
    }
    
    /** Checks whether the 'stackTraces' field has been set */
    public boolean hasStackTraces() {
      return fieldSetFlags()[2];
    }
    
    /** Clears the value of the 'stackTraces' field */
    public org.bear.api.standard.GlobalException.Builder clearStackTraces() {
      stackTraces = null;
      fieldSetFlags()[2] = false;
      return this;
    }

    @Override
    public GlobalException build() {
      try {
        GlobalException record = new GlobalException(getValue(), getCause());
        record.code = fieldSetFlags()[0] ? this.code : (java.lang.Integer) defaultValue(fields()[0]);
        record.msg = fieldSetFlags()[1] ? this.msg : (java.lang.String) defaultValue(fields()[1]);
        record.stackTraces = fieldSetFlags()[2] ? this.stackTraces : (java.util.List<org.bear.api.standard.StackTrace>) defaultValue(fields()[2]);
        return record;
      } catch (Exception e) {
        throw new org.apache.avro.AvroRuntimeException(e);
      }
    }
  }
}
