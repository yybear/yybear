/**
 * Autogenerated by Avro
 * 
 * DO NOT EDIT DIRECTLY
 */
package org.bear.api.identity;  
@SuppressWarnings("all")
@org.apache.avro.specific.AvroGenerated
public class User extends org.apache.avro.specific.SpecificRecordBase implements org.apache.avro.specific.SpecificRecord {
  public static final org.apache.avro.Schema SCHEMA$ = new org.apache.avro.Schema.Parser().parse("{\"type\":\"record\",\"name\":\"User\",\"namespace\":\"org.bear.api.identity\",\"fields\":[{\"name\":\"id\",\"type\":\"long\",\"doc\":\"* 用户标识： -1表示匿名用户\"},{\"name\":\"userName\",\"type\":{\"type\":\"string\",\"avro.java.string\":\"String\"},\"doc\":\"* 用户名\\r\\n\\t     *\\r\\n\\t     * @size min=0, max=100\"},{\"name\":\"nickName\",\"type\":{\"type\":\"string\",\"avro.java.string\":\"String\"},\"doc\":\"* 昵称\\r\\n\\t\\t *\\r\\n\\t\\t * @size min=0, max=100\"},{\"name\":\"realName\",\"type\":{\"type\":\"string\",\"avro.java.string\":\"String\"},\"doc\":\"* 真实姓名\\r\\n\\t\\t *\\r\\n\\t\\t * @size min=0, max=100\"},{\"name\":\"gender\",\"type\":{\"type\":\"enum\",\"name\":\"Gender\",\"namespace\":\"org.bear.api.standard\",\"symbols\":[\"UNKNOWN\",\"MALE\",\"FEMALE\"]},\"doc\":\"* 性别\"},{\"name\":\"idNo\",\"type\":{\"type\":\"string\",\"avro.java.string\":\"String\"},\"doc\":\"* 身份证号\"},{\"name\":\"location\",\"type\":{\"type\":\"string\",\"avro.java.string\":\"String\"},\"doc\":\"* 所在地\"},{\"name\":\"birthday\",\"type\":\"long\",\"doc\":\"* 生日：自January 1, 1970, 00:00:00 GMT开始的毫秒数，0 表示未填写（空）\"},{\"name\":\"description\",\"type\":{\"type\":\"string\",\"avro.java.string\":\"String\"},\"doc\":\"* 个人简介\\r\\n\\t\\t *\\r\\n\\t\\t * @size min=0, max=200\"},{\"name\":\"photo\",\"type\":{\"type\":\"string\",\"avro.java.string\":\"String\"},\"doc\":\"* 头像（标识）\\r\\n\\t\\t *\\r\\n\\t\\t * @size min=0, max=200\"},{\"name\":\"status\",\"type\":{\"type\":\"enum\",\"name\":\"UserStatus\",\"symbols\":[\"INIT\",\"NORMAL\",\"DISABLED\",\"ARCHIVED\",\"LOCKED\"]},\"doc\":\"* 状态\"},{\"name\":\"createTime\",\"type\":\"long\",\"doc\":\"* 创建时间\"},{\"name\":\"updateTime\",\"type\":\"long\",\"doc\":\"* 最近更新时间\"}]}");
  /** * 用户标识： -1表示匿名用户 */
  @Deprecated public long id;
  /** * 用户名
	     *
	     * @size min=0, max=100 */
  @Deprecated public java.lang.String userName;
  /** * 昵称
		 *
		 * @size min=0, max=100 */
  @Deprecated public java.lang.String nickName;
  /** * 真实姓名
		 *
		 * @size min=0, max=100 */
  @Deprecated public java.lang.String realName;
  /** * 性别 */
  @Deprecated public org.bear.api.standard.Gender gender;
  /** * 身份证号 */
  @Deprecated public java.lang.String idNo;
  /** * 所在地 */
  @Deprecated public java.lang.String location;
  /** * 生日：自January 1, 1970, 00:00:00 GMT开始的毫秒数，0 表示未填写（空） */
  @Deprecated public long birthday;
  /** * 个人简介
		 *
		 * @size min=0, max=200 */
  @Deprecated public java.lang.String description;
  /** * 头像（标识）
		 *
		 * @size min=0, max=200 */
  @Deprecated public java.lang.String photo;
  /** * 状态 */
  @Deprecated public org.bear.api.identity.UserStatus status;
  /** * 创建时间 */
  @Deprecated public long createTime;
  /** * 最近更新时间 */
  @Deprecated public long updateTime;

  /**
   * Default constructor.
   */
  public User() {}

  /**
   * All-args constructor.
   */
  public User(java.lang.Long id, java.lang.String userName, java.lang.String nickName, java.lang.String realName, org.bear.api.standard.Gender gender, java.lang.String idNo, java.lang.String location, java.lang.Long birthday, java.lang.String description, java.lang.String photo, org.bear.api.identity.UserStatus status, java.lang.Long createTime, java.lang.Long updateTime) {
    this.id = id;
    this.userName = userName;
    this.nickName = nickName;
    this.realName = realName;
    this.gender = gender;
    this.idNo = idNo;
    this.location = location;
    this.birthday = birthday;
    this.description = description;
    this.photo = photo;
    this.status = status;
    this.createTime = createTime;
    this.updateTime = updateTime;
  }

  public org.apache.avro.Schema getSchema() { return SCHEMA$; }
  // Used by DatumWriter.  Applications should not call. 
  public java.lang.Object get(int field$) {
    switch (field$) {
    case 0: return id;
    case 1: return userName;
    case 2: return nickName;
    case 3: return realName;
    case 4: return gender;
    case 5: return idNo;
    case 6: return location;
    case 7: return birthday;
    case 8: return description;
    case 9: return photo;
    case 10: return status;
    case 11: return createTime;
    case 12: return updateTime;
    default: throw new org.apache.avro.AvroRuntimeException("Bad index");
    }
  }
  // Used by DatumReader.  Applications should not call. 
  @SuppressWarnings(value="unchecked")
  public void put(int field$, java.lang.Object value$) {
    switch (field$) {
    case 0: id = (java.lang.Long)value$; break;
    case 1: userName = (java.lang.String)value$; break;
    case 2: nickName = (java.lang.String)value$; break;
    case 3: realName = (java.lang.String)value$; break;
    case 4: gender = (org.bear.api.standard.Gender)value$; break;
    case 5: idNo = (java.lang.String)value$; break;
    case 6: location = (java.lang.String)value$; break;
    case 7: birthday = (java.lang.Long)value$; break;
    case 8: description = (java.lang.String)value$; break;
    case 9: photo = (java.lang.String)value$; break;
    case 10: status = (org.bear.api.identity.UserStatus)value$; break;
    case 11: createTime = (java.lang.Long)value$; break;
    case 12: updateTime = (java.lang.Long)value$; break;
    default: throw new org.apache.avro.AvroRuntimeException("Bad index");
    }
  }

  /**
   * Gets the value of the 'id' field.
   * * 用户标识： -1表示匿名用户   */
  public java.lang.Long getId() {
    return id;
  }

  /**
   * Sets the value of the 'id' field.
   * * 用户标识： -1表示匿名用户   * @param value the value to set.
   */
  public void setId(java.lang.Long value) {
    this.id = value;
  }

  /**
   * Gets the value of the 'userName' field.
   * * 用户名
	     *
	     * @size min=0, max=100   */
  public java.lang.String getUserName() {
    return userName;
  }

  /**
   * Sets the value of the 'userName' field.
   * * 用户名
	     *
	     * @size min=0, max=100   * @param value the value to set.
   */
  public void setUserName(java.lang.String value) {
    this.userName = value;
  }

  /**
   * Gets the value of the 'nickName' field.
   * * 昵称
		 *
		 * @size min=0, max=100   */
  public java.lang.String getNickName() {
    return nickName;
  }

  /**
   * Sets the value of the 'nickName' field.
   * * 昵称
		 *
		 * @size min=0, max=100   * @param value the value to set.
   */
  public void setNickName(java.lang.String value) {
    this.nickName = value;
  }

  /**
   * Gets the value of the 'realName' field.
   * * 真实姓名
		 *
		 * @size min=0, max=100   */
  public java.lang.String getRealName() {
    return realName;
  }

  /**
   * Sets the value of the 'realName' field.
   * * 真实姓名
		 *
		 * @size min=0, max=100   * @param value the value to set.
   */
  public void setRealName(java.lang.String value) {
    this.realName = value;
  }

  /**
   * Gets the value of the 'gender' field.
   * * 性别   */
  public org.bear.api.standard.Gender getGender() {
    return gender;
  }

  /**
   * Sets the value of the 'gender' field.
   * * 性别   * @param value the value to set.
   */
  public void setGender(org.bear.api.standard.Gender value) {
    this.gender = value;
  }

  /**
   * Gets the value of the 'idNo' field.
   * * 身份证号   */
  public java.lang.String getIdNo() {
    return idNo;
  }

  /**
   * Sets the value of the 'idNo' field.
   * * 身份证号   * @param value the value to set.
   */
  public void setIdNo(java.lang.String value) {
    this.idNo = value;
  }

  /**
   * Gets the value of the 'location' field.
   * * 所在地   */
  public java.lang.String getLocation() {
    return location;
  }

  /**
   * Sets the value of the 'location' field.
   * * 所在地   * @param value the value to set.
   */
  public void setLocation(java.lang.String value) {
    this.location = value;
  }

  /**
   * Gets the value of the 'birthday' field.
   * * 生日：自January 1, 1970, 00:00:00 GMT开始的毫秒数，0 表示未填写（空）   */
  public java.lang.Long getBirthday() {
    return birthday;
  }

  /**
   * Sets the value of the 'birthday' field.
   * * 生日：自January 1, 1970, 00:00:00 GMT开始的毫秒数，0 表示未填写（空）   * @param value the value to set.
   */
  public void setBirthday(java.lang.Long value) {
    this.birthday = value;
  }

  /**
   * Gets the value of the 'description' field.
   * * 个人简介
		 *
		 * @size min=0, max=200   */
  public java.lang.String getDescription() {
    return description;
  }

  /**
   * Sets the value of the 'description' field.
   * * 个人简介
		 *
		 * @size min=0, max=200   * @param value the value to set.
   */
  public void setDescription(java.lang.String value) {
    this.description = value;
  }

  /**
   * Gets the value of the 'photo' field.
   * * 头像（标识）
		 *
		 * @size min=0, max=200   */
  public java.lang.String getPhoto() {
    return photo;
  }

  /**
   * Sets the value of the 'photo' field.
   * * 头像（标识）
		 *
		 * @size min=0, max=200   * @param value the value to set.
   */
  public void setPhoto(java.lang.String value) {
    this.photo = value;
  }

  /**
   * Gets the value of the 'status' field.
   * * 状态   */
  public org.bear.api.identity.UserStatus getStatus() {
    return status;
  }

  /**
   * Sets the value of the 'status' field.
   * * 状态   * @param value the value to set.
   */
  public void setStatus(org.bear.api.identity.UserStatus value) {
    this.status = value;
  }

  /**
   * Gets the value of the 'createTime' field.
   * * 创建时间   */
  public java.lang.Long getCreateTime() {
    return createTime;
  }

  /**
   * Sets the value of the 'createTime' field.
   * * 创建时间   * @param value the value to set.
   */
  public void setCreateTime(java.lang.Long value) {
    this.createTime = value;
  }

  /**
   * Gets the value of the 'updateTime' field.
   * * 最近更新时间   */
  public java.lang.Long getUpdateTime() {
    return updateTime;
  }

  /**
   * Sets the value of the 'updateTime' field.
   * * 最近更新时间   * @param value the value to set.
   */
  public void setUpdateTime(java.lang.Long value) {
    this.updateTime = value;
  }

  /** Creates a new User RecordBuilder */
  public static org.bear.api.identity.User.Builder newBuilder() {
    return new org.bear.api.identity.User.Builder();
  }
  
  /** Creates a new User RecordBuilder by copying an existing Builder */
  public static org.bear.api.identity.User.Builder newBuilder(org.bear.api.identity.User.Builder other) {
    return new org.bear.api.identity.User.Builder(other);
  }
  
  /** Creates a new User RecordBuilder by copying an existing User instance */
  public static org.bear.api.identity.User.Builder newBuilder(org.bear.api.identity.User other) {
    return new org.bear.api.identity.User.Builder(other);
  }
  
  /**
   * RecordBuilder for User instances.
   */
  public static class Builder extends org.apache.avro.specific.SpecificRecordBuilderBase<User>
    implements org.apache.avro.data.RecordBuilder<User> {

    private long id;
    private java.lang.String userName;
    private java.lang.String nickName;
    private java.lang.String realName;
    private org.bear.api.standard.Gender gender;
    private java.lang.String idNo;
    private java.lang.String location;
    private long birthday;
    private java.lang.String description;
    private java.lang.String photo;
    private org.bear.api.identity.UserStatus status;
    private long createTime;
    private long updateTime;

    /** Creates a new Builder */
    private Builder() {
      super(org.bear.api.identity.User.SCHEMA$);
    }
    
    /** Creates a Builder by copying an existing Builder */
    private Builder(org.bear.api.identity.User.Builder other) {
      super(other);
    }
    
    /** Creates a Builder by copying an existing User instance */
    private Builder(org.bear.api.identity.User other) {
            super(org.bear.api.identity.User.SCHEMA$);
      if (isValidValue(fields()[0], other.id)) {
        this.id = data().deepCopy(fields()[0].schema(), other.id);
        fieldSetFlags()[0] = true;
      }
      if (isValidValue(fields()[1], other.userName)) {
        this.userName = data().deepCopy(fields()[1].schema(), other.userName);
        fieldSetFlags()[1] = true;
      }
      if (isValidValue(fields()[2], other.nickName)) {
        this.nickName = data().deepCopy(fields()[2].schema(), other.nickName);
        fieldSetFlags()[2] = true;
      }
      if (isValidValue(fields()[3], other.realName)) {
        this.realName = data().deepCopy(fields()[3].schema(), other.realName);
        fieldSetFlags()[3] = true;
      }
      if (isValidValue(fields()[4], other.gender)) {
        this.gender = data().deepCopy(fields()[4].schema(), other.gender);
        fieldSetFlags()[4] = true;
      }
      if (isValidValue(fields()[5], other.idNo)) {
        this.idNo = data().deepCopy(fields()[5].schema(), other.idNo);
        fieldSetFlags()[5] = true;
      }
      if (isValidValue(fields()[6], other.location)) {
        this.location = data().deepCopy(fields()[6].schema(), other.location);
        fieldSetFlags()[6] = true;
      }
      if (isValidValue(fields()[7], other.birthday)) {
        this.birthday = data().deepCopy(fields()[7].schema(), other.birthday);
        fieldSetFlags()[7] = true;
      }
      if (isValidValue(fields()[8], other.description)) {
        this.description = data().deepCopy(fields()[8].schema(), other.description);
        fieldSetFlags()[8] = true;
      }
      if (isValidValue(fields()[9], other.photo)) {
        this.photo = data().deepCopy(fields()[9].schema(), other.photo);
        fieldSetFlags()[9] = true;
      }
      if (isValidValue(fields()[10], other.status)) {
        this.status = data().deepCopy(fields()[10].schema(), other.status);
        fieldSetFlags()[10] = true;
      }
      if (isValidValue(fields()[11], other.createTime)) {
        this.createTime = data().deepCopy(fields()[11].schema(), other.createTime);
        fieldSetFlags()[11] = true;
      }
      if (isValidValue(fields()[12], other.updateTime)) {
        this.updateTime = data().deepCopy(fields()[12].schema(), other.updateTime);
        fieldSetFlags()[12] = true;
      }
    }

    /** Gets the value of the 'id' field */
    public java.lang.Long getId() {
      return id;
    }
    
    /** Sets the value of the 'id' field */
    public org.bear.api.identity.User.Builder setId(long value) {
      validate(fields()[0], value);
      this.id = value;
      fieldSetFlags()[0] = true;
      return this; 
    }
    
    /** Checks whether the 'id' field has been set */
    public boolean hasId() {
      return fieldSetFlags()[0];
    }
    
    /** Clears the value of the 'id' field */
    public org.bear.api.identity.User.Builder clearId() {
      fieldSetFlags()[0] = false;
      return this;
    }

    /** Gets the value of the 'userName' field */
    public java.lang.String getUserName() {
      return userName;
    }
    
    /** Sets the value of the 'userName' field */
    public org.bear.api.identity.User.Builder setUserName(java.lang.String value) {
      validate(fields()[1], value);
      this.userName = value;
      fieldSetFlags()[1] = true;
      return this; 
    }
    
    /** Checks whether the 'userName' field has been set */
    public boolean hasUserName() {
      return fieldSetFlags()[1];
    }
    
    /** Clears the value of the 'userName' field */
    public org.bear.api.identity.User.Builder clearUserName() {
      userName = null;
      fieldSetFlags()[1] = false;
      return this;
    }

    /** Gets the value of the 'nickName' field */
    public java.lang.String getNickName() {
      return nickName;
    }
    
    /** Sets the value of the 'nickName' field */
    public org.bear.api.identity.User.Builder setNickName(java.lang.String value) {
      validate(fields()[2], value);
      this.nickName = value;
      fieldSetFlags()[2] = true;
      return this; 
    }
    
    /** Checks whether the 'nickName' field has been set */
    public boolean hasNickName() {
      return fieldSetFlags()[2];
    }
    
    /** Clears the value of the 'nickName' field */
    public org.bear.api.identity.User.Builder clearNickName() {
      nickName = null;
      fieldSetFlags()[2] = false;
      return this;
    }

    /** Gets the value of the 'realName' field */
    public java.lang.String getRealName() {
      return realName;
    }
    
    /** Sets the value of the 'realName' field */
    public org.bear.api.identity.User.Builder setRealName(java.lang.String value) {
      validate(fields()[3], value);
      this.realName = value;
      fieldSetFlags()[3] = true;
      return this; 
    }
    
    /** Checks whether the 'realName' field has been set */
    public boolean hasRealName() {
      return fieldSetFlags()[3];
    }
    
    /** Clears the value of the 'realName' field */
    public org.bear.api.identity.User.Builder clearRealName() {
      realName = null;
      fieldSetFlags()[3] = false;
      return this;
    }

    /** Gets the value of the 'gender' field */
    public org.bear.api.standard.Gender getGender() {
      return gender;
    }
    
    /** Sets the value of the 'gender' field */
    public org.bear.api.identity.User.Builder setGender(org.bear.api.standard.Gender value) {
      validate(fields()[4], value);
      this.gender = value;
      fieldSetFlags()[4] = true;
      return this; 
    }
    
    /** Checks whether the 'gender' field has been set */
    public boolean hasGender() {
      return fieldSetFlags()[4];
    }
    
    /** Clears the value of the 'gender' field */
    public org.bear.api.identity.User.Builder clearGender() {
      gender = null;
      fieldSetFlags()[4] = false;
      return this;
    }

    /** Gets the value of the 'idNo' field */
    public java.lang.String getIdNo() {
      return idNo;
    }
    
    /** Sets the value of the 'idNo' field */
    public org.bear.api.identity.User.Builder setIdNo(java.lang.String value) {
      validate(fields()[5], value);
      this.idNo = value;
      fieldSetFlags()[5] = true;
      return this; 
    }
    
    /** Checks whether the 'idNo' field has been set */
    public boolean hasIdNo() {
      return fieldSetFlags()[5];
    }
    
    /** Clears the value of the 'idNo' field */
    public org.bear.api.identity.User.Builder clearIdNo() {
      idNo = null;
      fieldSetFlags()[5] = false;
      return this;
    }

    /** Gets the value of the 'location' field */
    public java.lang.String getLocation() {
      return location;
    }
    
    /** Sets the value of the 'location' field */
    public org.bear.api.identity.User.Builder setLocation(java.lang.String value) {
      validate(fields()[6], value);
      this.location = value;
      fieldSetFlags()[6] = true;
      return this; 
    }
    
    /** Checks whether the 'location' field has been set */
    public boolean hasLocation() {
      return fieldSetFlags()[6];
    }
    
    /** Clears the value of the 'location' field */
    public org.bear.api.identity.User.Builder clearLocation() {
      location = null;
      fieldSetFlags()[6] = false;
      return this;
    }

    /** Gets the value of the 'birthday' field */
    public java.lang.Long getBirthday() {
      return birthday;
    }
    
    /** Sets the value of the 'birthday' field */
    public org.bear.api.identity.User.Builder setBirthday(long value) {
      validate(fields()[7], value);
      this.birthday = value;
      fieldSetFlags()[7] = true;
      return this; 
    }
    
    /** Checks whether the 'birthday' field has been set */
    public boolean hasBirthday() {
      return fieldSetFlags()[7];
    }
    
    /** Clears the value of the 'birthday' field */
    public org.bear.api.identity.User.Builder clearBirthday() {
      fieldSetFlags()[7] = false;
      return this;
    }

    /** Gets the value of the 'description' field */
    public java.lang.String getDescription() {
      return description;
    }
    
    /** Sets the value of the 'description' field */
    public org.bear.api.identity.User.Builder setDescription(java.lang.String value) {
      validate(fields()[8], value);
      this.description = value;
      fieldSetFlags()[8] = true;
      return this; 
    }
    
    /** Checks whether the 'description' field has been set */
    public boolean hasDescription() {
      return fieldSetFlags()[8];
    }
    
    /** Clears the value of the 'description' field */
    public org.bear.api.identity.User.Builder clearDescription() {
      description = null;
      fieldSetFlags()[8] = false;
      return this;
    }

    /** Gets the value of the 'photo' field */
    public java.lang.String getPhoto() {
      return photo;
    }
    
    /** Sets the value of the 'photo' field */
    public org.bear.api.identity.User.Builder setPhoto(java.lang.String value) {
      validate(fields()[9], value);
      this.photo = value;
      fieldSetFlags()[9] = true;
      return this; 
    }
    
    /** Checks whether the 'photo' field has been set */
    public boolean hasPhoto() {
      return fieldSetFlags()[9];
    }
    
    /** Clears the value of the 'photo' field */
    public org.bear.api.identity.User.Builder clearPhoto() {
      photo = null;
      fieldSetFlags()[9] = false;
      return this;
    }

    /** Gets the value of the 'status' field */
    public org.bear.api.identity.UserStatus getStatus() {
      return status;
    }
    
    /** Sets the value of the 'status' field */
    public org.bear.api.identity.User.Builder setStatus(org.bear.api.identity.UserStatus value) {
      validate(fields()[10], value);
      this.status = value;
      fieldSetFlags()[10] = true;
      return this; 
    }
    
    /** Checks whether the 'status' field has been set */
    public boolean hasStatus() {
      return fieldSetFlags()[10];
    }
    
    /** Clears the value of the 'status' field */
    public org.bear.api.identity.User.Builder clearStatus() {
      status = null;
      fieldSetFlags()[10] = false;
      return this;
    }

    /** Gets the value of the 'createTime' field */
    public java.lang.Long getCreateTime() {
      return createTime;
    }
    
    /** Sets the value of the 'createTime' field */
    public org.bear.api.identity.User.Builder setCreateTime(long value) {
      validate(fields()[11], value);
      this.createTime = value;
      fieldSetFlags()[11] = true;
      return this; 
    }
    
    /** Checks whether the 'createTime' field has been set */
    public boolean hasCreateTime() {
      return fieldSetFlags()[11];
    }
    
    /** Clears the value of the 'createTime' field */
    public org.bear.api.identity.User.Builder clearCreateTime() {
      fieldSetFlags()[11] = false;
      return this;
    }

    /** Gets the value of the 'updateTime' field */
    public java.lang.Long getUpdateTime() {
      return updateTime;
    }
    
    /** Sets the value of the 'updateTime' field */
    public org.bear.api.identity.User.Builder setUpdateTime(long value) {
      validate(fields()[12], value);
      this.updateTime = value;
      fieldSetFlags()[12] = true;
      return this; 
    }
    
    /** Checks whether the 'updateTime' field has been set */
    public boolean hasUpdateTime() {
      return fieldSetFlags()[12];
    }
    
    /** Clears the value of the 'updateTime' field */
    public org.bear.api.identity.User.Builder clearUpdateTime() {
      fieldSetFlags()[12] = false;
      return this;
    }

    @Override
    public User build() {
      try {
        User record = new User();
        record.id = fieldSetFlags()[0] ? this.id : (java.lang.Long) defaultValue(fields()[0]);
        record.userName = fieldSetFlags()[1] ? this.userName : (java.lang.String) defaultValue(fields()[1]);
        record.nickName = fieldSetFlags()[2] ? this.nickName : (java.lang.String) defaultValue(fields()[2]);
        record.realName = fieldSetFlags()[3] ? this.realName : (java.lang.String) defaultValue(fields()[3]);
        record.gender = fieldSetFlags()[4] ? this.gender : (org.bear.api.standard.Gender) defaultValue(fields()[4]);
        record.idNo = fieldSetFlags()[5] ? this.idNo : (java.lang.String) defaultValue(fields()[5]);
        record.location = fieldSetFlags()[6] ? this.location : (java.lang.String) defaultValue(fields()[6]);
        record.birthday = fieldSetFlags()[7] ? this.birthday : (java.lang.Long) defaultValue(fields()[7]);
        record.description = fieldSetFlags()[8] ? this.description : (java.lang.String) defaultValue(fields()[8]);
        record.photo = fieldSetFlags()[9] ? this.photo : (java.lang.String) defaultValue(fields()[9]);
        record.status = fieldSetFlags()[10] ? this.status : (org.bear.api.identity.UserStatus) defaultValue(fields()[10]);
        record.createTime = fieldSetFlags()[11] ? this.createTime : (java.lang.Long) defaultValue(fields()[11]);
        record.updateTime = fieldSetFlags()[12] ? this.updateTime : (java.lang.Long) defaultValue(fields()[12]);
        return record;
      } catch (Exception e) {
        throw new org.apache.avro.AvroRuntimeException(e);
      }
    }
  }
}
