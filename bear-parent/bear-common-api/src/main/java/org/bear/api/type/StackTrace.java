/**
 * Autogenerated by Avro
 * 
 * DO NOT EDIT DIRECTLY
 */
package org.bear.api.type;  
@SuppressWarnings("all")
/** 异常堆栈对象 */
@org.apache.avro.specific.AvroGenerated
public class StackTrace extends org.apache.avro.specific.SpecificRecordBase implements org.apache.avro.specific.SpecificRecord {
  public static final org.apache.avro.Schema SCHEMA$ = new org.apache.avro.Schema.Parser().parse("{\"type\":\"record\",\"name\":\"StackTrace\",\"namespace\":\"org.bear.api.type\",\"doc\":\"异常堆栈对象\",\"fields\":[{\"name\":\"className\",\"type\":{\"type\":\"string\",\"avro.java.string\":\"String\"},\"doc\":\"发生异常的类\"},{\"name\":\"methodName\",\"type\":{\"type\":\"string\",\"avro.java.string\":\"String\"},\"doc\":\"发生异常的方法\"},{\"name\":\"fileName\",\"type\":{\"type\":\"string\",\"avro.java.string\":\"String\"},\"doc\":\"发生异常的文件\"},{\"name\":\"lineNumber\",\"type\":\"int\",\"doc\":\"发生异常的行号\"}]}");
  public static org.apache.avro.Schema getClassSchema() { return SCHEMA$; }
  /** 发生异常的类 */
  @Deprecated public java.lang.String className;
  /** 发生异常的方法 */
  @Deprecated public java.lang.String methodName;
  /** 发生异常的文件 */
  @Deprecated public java.lang.String fileName;
  /** 发生异常的行号 */
  @Deprecated public int lineNumber;

  /**
   * Default constructor.
   */
  public StackTrace() {}

  /**
   * All-args constructor.
   */
  public StackTrace(java.lang.String className, java.lang.String methodName, java.lang.String fileName, java.lang.Integer lineNumber) {
    this.className = className;
    this.methodName = methodName;
    this.fileName = fileName;
    this.lineNumber = lineNumber;
  }

  public org.apache.avro.Schema getSchema() { return SCHEMA$; }
  // Used by DatumWriter.  Applications should not call. 
  public java.lang.Object get(int field$) {
    switch (field$) {
    case 0: return className;
    case 1: return methodName;
    case 2: return fileName;
    case 3: return lineNumber;
    default: throw new org.apache.avro.AvroRuntimeException("Bad index");
    }
  }
  // Used by DatumReader.  Applications should not call. 
  @SuppressWarnings(value="unchecked")
  public void put(int field$, java.lang.Object value$) {
    switch (field$) {
    case 0: className = (java.lang.String)value$; break;
    case 1: methodName = (java.lang.String)value$; break;
    case 2: fileName = (java.lang.String)value$; break;
    case 3: lineNumber = (java.lang.Integer)value$; break;
    default: throw new org.apache.avro.AvroRuntimeException("Bad index");
    }
  }

  /**
   * Gets the value of the 'className' field.
   * 发生异常的类   */
  public java.lang.String getClassName() {
    return className;
  }

  /**
   * Sets the value of the 'className' field.
   * 发生异常的类   * @param value the value to set.
   */
  public void setClassName(java.lang.String value) {
    this.className = value;
  }

  /**
   * Gets the value of the 'methodName' field.
   * 发生异常的方法   */
  public java.lang.String getMethodName() {
    return methodName;
  }

  /**
   * Sets the value of the 'methodName' field.
   * 发生异常的方法   * @param value the value to set.
   */
  public void setMethodName(java.lang.String value) {
    this.methodName = value;
  }

  /**
   * Gets the value of the 'fileName' field.
   * 发生异常的文件   */
  public java.lang.String getFileName() {
    return fileName;
  }

  /**
   * Sets the value of the 'fileName' field.
   * 发生异常的文件   * @param value the value to set.
   */
  public void setFileName(java.lang.String value) {
    this.fileName = value;
  }

  /**
   * Gets the value of the 'lineNumber' field.
   * 发生异常的行号   */
  public java.lang.Integer getLineNumber() {
    return lineNumber;
  }

  /**
   * Sets the value of the 'lineNumber' field.
   * 发生异常的行号   * @param value the value to set.
   */
  public void setLineNumber(java.lang.Integer value) {
    this.lineNumber = value;
  }

  /** Creates a new StackTrace RecordBuilder */
  public static org.bear.api.type.StackTrace.Builder newBuilder() {
    return new org.bear.api.type.StackTrace.Builder();
  }
  
  /** Creates a new StackTrace RecordBuilder by copying an existing Builder */
  public static org.bear.api.type.StackTrace.Builder newBuilder(org.bear.api.type.StackTrace.Builder other) {
    return new org.bear.api.type.StackTrace.Builder(other);
  }
  
  /** Creates a new StackTrace RecordBuilder by copying an existing StackTrace instance */
  public static org.bear.api.type.StackTrace.Builder newBuilder(org.bear.api.type.StackTrace other) {
    return new org.bear.api.type.StackTrace.Builder(other);
  }
  
  /**
   * RecordBuilder for StackTrace instances.
   */
  public static class Builder extends org.apache.avro.specific.SpecificRecordBuilderBase<StackTrace>
    implements org.apache.avro.data.RecordBuilder<StackTrace> {

    private java.lang.String className;
    private java.lang.String methodName;
    private java.lang.String fileName;
    private int lineNumber;

    /** Creates a new Builder */
    private Builder() {
      super(org.bear.api.type.StackTrace.SCHEMA$);
    }
    
    /** Creates a Builder by copying an existing Builder */
    private Builder(org.bear.api.type.StackTrace.Builder other) {
      super(other);
    }
    
    /** Creates a Builder by copying an existing StackTrace instance */
    private Builder(org.bear.api.type.StackTrace other) {
            super(org.bear.api.type.StackTrace.SCHEMA$);
      if (isValidValue(fields()[0], other.className)) {
        this.className = data().deepCopy(fields()[0].schema(), other.className);
        fieldSetFlags()[0] = true;
      }
      if (isValidValue(fields()[1], other.methodName)) {
        this.methodName = data().deepCopy(fields()[1].schema(), other.methodName);
        fieldSetFlags()[1] = true;
      }
      if (isValidValue(fields()[2], other.fileName)) {
        this.fileName = data().deepCopy(fields()[2].schema(), other.fileName);
        fieldSetFlags()[2] = true;
      }
      if (isValidValue(fields()[3], other.lineNumber)) {
        this.lineNumber = data().deepCopy(fields()[3].schema(), other.lineNumber);
        fieldSetFlags()[3] = true;
      }
    }

    /** Gets the value of the 'className' field */
    public java.lang.String getClassName() {
      return className;
    }
    
    /** Sets the value of the 'className' field */
    public org.bear.api.type.StackTrace.Builder setClassName(java.lang.String value) {
      validate(fields()[0], value);
      this.className = value;
      fieldSetFlags()[0] = true;
      return this; 
    }
    
    /** Checks whether the 'className' field has been set */
    public boolean hasClassName() {
      return fieldSetFlags()[0];
    }
    
    /** Clears the value of the 'className' field */
    public org.bear.api.type.StackTrace.Builder clearClassName() {
      className = null;
      fieldSetFlags()[0] = false;
      return this;
    }

    /** Gets the value of the 'methodName' field */
    public java.lang.String getMethodName() {
      return methodName;
    }
    
    /** Sets the value of the 'methodName' field */
    public org.bear.api.type.StackTrace.Builder setMethodName(java.lang.String value) {
      validate(fields()[1], value);
      this.methodName = value;
      fieldSetFlags()[1] = true;
      return this; 
    }
    
    /** Checks whether the 'methodName' field has been set */
    public boolean hasMethodName() {
      return fieldSetFlags()[1];
    }
    
    /** Clears the value of the 'methodName' field */
    public org.bear.api.type.StackTrace.Builder clearMethodName() {
      methodName = null;
      fieldSetFlags()[1] = false;
      return this;
    }

    /** Gets the value of the 'fileName' field */
    public java.lang.String getFileName() {
      return fileName;
    }
    
    /** Sets the value of the 'fileName' field */
    public org.bear.api.type.StackTrace.Builder setFileName(java.lang.String value) {
      validate(fields()[2], value);
      this.fileName = value;
      fieldSetFlags()[2] = true;
      return this; 
    }
    
    /** Checks whether the 'fileName' field has been set */
    public boolean hasFileName() {
      return fieldSetFlags()[2];
    }
    
    /** Clears the value of the 'fileName' field */
    public org.bear.api.type.StackTrace.Builder clearFileName() {
      fileName = null;
      fieldSetFlags()[2] = false;
      return this;
    }

    /** Gets the value of the 'lineNumber' field */
    public java.lang.Integer getLineNumber() {
      return lineNumber;
    }
    
    /** Sets the value of the 'lineNumber' field */
    public org.bear.api.type.StackTrace.Builder setLineNumber(int value) {
      validate(fields()[3], value);
      this.lineNumber = value;
      fieldSetFlags()[3] = true;
      return this; 
    }
    
    /** Checks whether the 'lineNumber' field has been set */
    public boolean hasLineNumber() {
      return fieldSetFlags()[3];
    }
    
    /** Clears the value of the 'lineNumber' field */
    public org.bear.api.type.StackTrace.Builder clearLineNumber() {
      fieldSetFlags()[3] = false;
      return this;
    }

    @Override
    public StackTrace build() {
      try {
        StackTrace record = new StackTrace();
        record.className = fieldSetFlags()[0] ? this.className : (java.lang.String) defaultValue(fields()[0]);
        record.methodName = fieldSetFlags()[1] ? this.methodName : (java.lang.String) defaultValue(fields()[1]);
        record.fileName = fieldSetFlags()[2] ? this.fileName : (java.lang.String) defaultValue(fields()[2]);
        record.lineNumber = fieldSetFlags()[3] ? this.lineNumber : (java.lang.Integer) defaultValue(fields()[3]);
        return record;
      } catch (Exception e) {
        throw new org.apache.avro.AvroRuntimeException(e);
      }
    }
  }
}
