@namespace("org.bear.api.fs")
protocol FileStoreService{
	import idl "standard.avdl";
	
	/**
	 * 表示支持的图片变换类型
	 *
	 * @field RESIZE 等比缩放
	 *
	 * @field CROP 裁剪
	 *
	 * @field ROTATE 旋转
	 */
	enum Operate {
	    RESIZE,
	    CROP,
	    ROTATE
	}
	
	/**
	 * 文件描述信息,通过主键或者业务加所有者即可获得所关联的文件信息
	 *
	 * @field id 文件的id,主键
	 *
	 * @field bizKey 文件所属的业务
	 *
	 * @field owner 文件的所有者,建议为业务对象的主键,这样配合bizKey就可以确定和这个业务对象向关联的所有文件
	 *
	 * @field userId 文件的关联用户,表示文件由哪个用户上传
	 *
	 * @field name 文件的名称
	 *
	 * @field size 文件的大小
	 *
	 * @field data 文件的附加属性
	 *
	 * @field updateAt 文件的最后更新时间
	 *
	 * @field scope 文件的访问权限级别
	 */
	record File {
	    long id;
	    string bizKey;
	    string owner;
	    long userId;
	    string name;
	    int size;
	    map<string> data;
	    long updateAt;
	    org.bear.api.standard.AccessScope scope;
	}
	
	/**
	 * 文件列表分页对象
	 *
	 * @field items 文件列表
	 *
	 * @field total 文件总数
	 */
	record FilePage {
	    array<File> items;
	    int total;
	}
	
	/**
	 * 图片变换操作
	 *
	 * @field operate 操作类型
	 *
	 * @field params 附加参数
	 */
	record Action {
	    Operate operate;
	    map<string> param;
	}

    /**
     * 保存一个文件,当id为空时则为新建
     * 
     * 1. 若id不为空,获取id对应的file对象,设置传入的新属性后更新 (可更新owner,userId,name,scope,data属性)
     * 2. 若id为空,则新建一个file对象
     *
     * @param file 待保存的文件信
     *
     * @return 包含id的文件
     *
     * @tables fs_file
     */
    File saveFile(File file) throws org.bear.api.standard.GlobalException;

    /**
     * 批量删除文件
     * 1. 批量将对应的数据库记录的status属性设置成Status.DELETED(逻辑删除)
     * 2. 真实文件不做删除
     * 
     * @param ids 文件id列表
     *
     * @tables fs_file
     */
    void removeFiles(array<long> ids) throws org.bear.api.standard.GlobalException;

    /**
     * 批量删除和某个所有者相关联的所有文件
     * 1. 批量将对应的数据库记录的status属性设置成Status.DELETED(逻辑删除)
     * 2. 真实文件不做删除
     * 
     * @param bizKey 业务名
     *
     * @param owner 所有者
     *
     * @tables fs_file
     */
    void removeFilesByOwner(string bizKey, string owner) throws org.bear.api.standard.GlobalException;

    /**
     * 将二进制内容写入到目标文件的指定位置
     * 
     * 1. 根据文件编号获取数据库中的文件记录
     * 2. 根据文件选择存储对象(storage)
     * 	  2.1 file对象获取storage属性值(系统在初始化时默认配置了唯一一个id为s1的sanyuan.any123.filestore.fs.FileSystemStorage,它的capability=-1,enable=true,存储基本路径directory配置为application.properties的storage1.path)
     *        若属性值未设置,遍历已有的storages列表,如果storage.isAvailable(如果是enable且,capability小于0或used大于capability),则选择这个storage
     *        若属性值已设置(该值可以为多个存储id以逗号分隔连接而成),则分隔成id列表,遍历已有storages的map(key为storage的id,value为storage),匹配第一个有效的storage(同上storage.isAvaliable)
     * 3. 获取file的key(fs-加上文件编号)
     * 4. 把这个key进行md5加密,'加密结果前两位/加密结果第三、四位/加密结果',作为文件的子路径
     * 5. 如果storage配置了useXsendfile为true的话,子路径前加上'/文件编号/'组成xpath
     * 6. 检查并创建这个文件
     * 	  6.1 若该路径下文件已存在,则跳过
     *    6.2 若文件不存在,检查并创建父文件路径,创建该文件
     * 7. 写入从起始位置开始,写入一定长度的二进制文件
     * 8. 文件设置大小信息
     * 9. 更新数据库中的文件信息
     *  
     * @param id 文件id
     *
     * @param binary 二进制内容
     *
     * @param position 起始位置
     *
     * @param binary 二进制内容
     *
     * @throws FsException <ul>
     *     <li>201 io错误</li>
     *     <li>202 文件未找到</li>
     * </ul>
     *
     * @tables fs_file
     */
    void writeFile(long id, bytes `bytes`, int position) throws org.bear.api.standard.GlobalException;

    /**
     * 从目标文件中读取内容
     * 
     * 1. 同writeFile逻辑一致,获取文件存放路径
     * 2. 根据路径找到文件,读取文件起始位置开始,一定长度的二进制流
     * 
     *
     * @param id 文件id
     *
     * @param position 起始位置
     *
     * @param count 要读取的长度
     *
     * @return 读取的二进制内容
     *
     * @throws FsException <ul>
     *     <li>201 io错误</li>
     *     <li>202 文件未找到</li>
     * </ul>
     *
     * @tables fs_file
     */
    bytes readFile(long id, int position, int count) throws org.bear.api.standard.GlobalException;

    /**
     * 变换一个图片
     *  
     * 涉及到的参数
     * 
     *  
     * 1. 同writeFile逻辑一致,获取文件存放路径
     * 2. 如果文件是图片(后缀为"gif", "bmp", "jpg", "jpeg", "png"之一),则进行后续操作(本系统由AwtImageTransform进行图片相关操作)
     * 3. 若操作为缩放,则调用图片缩放接口,由宽度为限制条件(若实际图片宽度>目标宽度,则缩放比例为目标宽度/实际宽度),等比缩放
     * 4. 若操作为裁剪,则调用图片裁剪接口,截取从图片左上角为坐标轴原点,第四象限中(left,-top)这个点为起点,x轴正方向width宽度,y轴反方向height高度组成的矩形
     * 5. 若操作为翻转,则选取从图片左上角为坐标轴原点,第四象限中(left,-top)这个点为旋转中心点,以逆时针方向旋转一定角度
     * 6. 操作完成后,更新数据库中文件的大小
     * 
     * @param id 文件id
     *
     * @param actions 变换操作列表
     *
     * @tables fs_file
     *
     */
    void transformImage(long id, array<Action> actions) throws org.bear.api.standard.GlobalException;

    /**
     * 获取一个文件的访问token,通过url携带这个token实现文件的自定义权限
     * 1. 用tokenService创建一个有效期为ttl的token (详见tokenService的createTokenEx)
     * 2. 用tokenService在该token上绑定参数列表 (详见tokenService的bindListParam)
     *    2.1 多个id
     *    2.2 若可写,参数加上true
     * 3. 返回该token
     * 
     * @param ids 文件id
     *
     * @param writeable 是否可写
     *
     * @param ttl token的有效时间,单位秒
     *
     * @return token字符串
     *
     * @tables fs_file
     */
    string getToken(array<long> ids, boolean writeable, int ttl) throws org.bear.api.standard.GlobalException;

    /**
     * 获取业务文件的访问token,通过url携带这个token实现文件的自定义权限
     *
     * 1. 用tokenService创建一个有效期为ttl的token (详见tokenService的createTokenEx)
     * 2. 用tokenService在该token上绑定参数列表 (详见tokenService的bindListParam)
     *    2.1 多个owner
     *    2.2 若可写,参数加上true
     * 3. 返回该token
     *
     * @param bizKey 业务名
     *
     * @param owners 所有者列表
     *
     * @param writeable 是否可写
     *
     * @param ttl token的有效时间,单位秒
     *
     * @return 业务token字符串
     *
     * @tables fs_file
     */
    string getBizToken(string bizKey, array<string> owners, boolean writeable, int ttl) throws org.bear.api.standard.GlobalException;

    /**
     * 绑定文件的读取权限到会话session
     * 1.遍历文件编号,将他们以 'fs'+文件编号 为key,'T'为value放入一个map
     * 2.调用identityService的setSessionAttributes方法进行绑定(详见identityService)
     *
     * @param sessionId 会话id
     *
     * @param ids 文件id列表
     */
    void bindSession(string sessionId, array<long> ids) throws org.bear.api.standard.GlobalException;
    /**
     * 取消绑定文件的读取权限到会话session
     * 
     * 1.遍历文件编号,将他们以 'fs'+文件编号 为key,'T'为value放入一个map
     * 2.调用identityService的removeSessionAttributes方法取消绑定(详见identityService)
     * 
     * @param sessionId 会话id
     *
     * @param ids 文件id列表
     */
    void unbindSession(string sessionId, array<long> ids) throws org.bear.api.standard.GlobalException;

    /**
     * 获取一个文件
     * 
     * 1.仅获取数据库中的一个文件对象
     *
     * @param id 文件id
     *
     * @return 文件
     *
     * @tables fs_file
     */
    File getFile(long id) throws org.bear.api.standard.GlobalException;

    /**
     * 根据id批量获取文件
     * 
     * @param id 文件id列表
     *
     * @return 文件map
     *
     * @tables fs_file
     */
    map<File> getFileMap(array<long> ids) throws org.bear.api.standard.GlobalException;

    /**
     * 获取某个业务对象关联的文件
     * 例如用户的头像可以用getSingleFile(SPACE_AVATAR, "888")来获取888用户的头像文件信息
     *
     * @param bizKey 业务名
     *
     * @param owner 所有者
     *
     * @return 文件
     *
     * @tables fs_file
     */
    File getSingleFile(string bizKey, string owner) throws org.bear.api.standard.GlobalException;

    /**
     * 获取某个业务对象关联的文件,例如要获取某个帖子相关的附件,,按文件上传倒序排序
     *
     * @param bizKey 业务名
     *
     * @param owner 所有者
     *
     * @return 文件列表
     *
     * @tables fs_file
     */
    array<File> getFiles(string bizKey, string owner) throws org.bear.api.standard.GlobalException;

    /**
     * 根据owner列表批量获取某个业务对象关联的文件
     *
     * @param bizKey 业务名
     *
     * @param owners 所有者列表
     *
     * @return 文件列表map
     *
     * @tables fs_file
     */
    map<array<File>> batchGetFiles(string bizKey, array<string> owners) throws org.bear.api.standard.GlobalException;

    /**
     * 根据多个bizKey,多个owner获取文件,格式map<bizKey, set<owner>>
     *
     * @param ownersMap 嵌套map,map<bizKey, set<owner>>
     *
     * @param owners 所有者列表
     *
     * @return 嵌套map,map<bizKey, map<owner, list<File>>>
     *
     * @tables fs_file
     */
    map<map<array<File>>> batchGetFilesEx(map<array<string>> ownersMap) throws org.bear.api.standard.GlobalException;

    /**
     * 获取某个文件的加密访问id
     * 
     * 1. 将id和系统时间和有效期,以某种形式组合,并通过加密算法加密后形成的字符串
     * 
     * @param id 文件id
     *
     * @param ttl 加密id的有效时间,单位秒，0为不限制
     *
     * @return 加密的id
     *
     * @tables fs_file
     */
    string getEncryptedId(long id, int ttl) throws org.bear.api.standard.GlobalException;

    /**
     * 批量获取文件的加密访问
     * 
     * 1.同getEncryptedId
     * 
     * @param ids 文件id列表
     *
     * @param ttl 加密id的有效时间,单位秒，0为不限制
     *
     * @return 加密的id列表
     *
     * @tables fs_file
     */
    map<string> getEncryptedIds(array<long> ids, int ttl) throws org.bear.api.standard.GlobalException;

    /**
     * 根据加密的id获取文件
     * 
     * 1. 根据加密规则解密出文件编号
     * 2. 根据文件编号从数据库中获取文件对象
     *
     * @param encryptedId 加密的id
     *
     * @return 文件
     *
     * @tables fs_file
     */
    File getFileByEncryptedId(string encryptedId) throws org.bear.api.standard.GlobalException;

    /**
     * 批量根据加密的id获取文件
     * 
     * 1.同getFileByEncryptedId
     *
     * @param encryptedIds 加密的id列表
     *
     * @return 文件map
     *
     * @tables fs_file
     */
    map<File> getFileMapByEncryptedId(array<string> encryptedIds) throws org.bear.api.standard.GlobalException;

    /**
     * 获取某个用户在目标业务的所有文件,如果业务为空则返回所有业务文件,按文件上传倒序排序
     *
     * @param bizKey 业务名 为空则忽略此条件
     *
     * @param owner 所有者 为空则忽略此条件
     *
     * @param userId 用户id
     *
     * @param start 开始位置
     *
     * @param size 获取个数
     *
     * @return 文件列表分页对象
     *
     * @tables fs_file
     */
    FilePage getUserFiles(string bizKey, string owner, long userId, int start, int size) throws org.bear.api.standard.GlobalException;
}